{"version":3,"sources":["logo.svg","sidemenu.js","App.js","components/verseCard.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allButs","react_default","a","createElement","id","className","onClick","handlePlay","handlePause","document","getElementById","style","width","Component","App","setState","playStatus","Sound","status","PAUSE","handlePlaying","playing","PLAYING","fetchData","i","fetch","then","response","json","arrayOfUsers","foo","key","push","allAudio","catch","err","console","log","handleRender","map","e","handleSelectAudio","url","name","handleOnClick","firstLoad","lib_default","playFromPosition","src_sidemenu","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04f9a179.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './sidemenu.css';\n\nclass SideMenu extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n     allButs:[]\n   };\n  }\n  render() {\n    return (\n        <div id=\"mySidenav\" className=\"sidenav\">\n              <button onClick={this.props.handlePlay}>PLAY</button>\n              <button onClick={this.props.handlePause}>PAUSE</button>\n        </div>\n    );\n  }\n  handleClose(){\n     document.getElementById(\"mySidenav\").style.width = \"0px\";\n     // document.getElementById(\"mySidenavHindi\").style.width = \"0px\";\n\n  }\n  componentDidMount(){\n    this.props.handlePlay()\n  }\n}\n\nexport default SideMenu;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SidemMenu from './sidemenu.js'\nimport Sound from 'react-sound';\nimport VerseCard from './components/verseCard.js'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n     allButs:[],\n     url:'',\n     status:1,\n     allAudio:[],\n     firstLoad:1,\n     playStatus:Sound.status.PAUSE,\n     playing:\"\"\n   };\n  }  \n  render() {\n    return (\n      <div className=\"App\">\n            <div className=\"topCard\">Select the Parah from the list below.<br></br><br>\n            </br>Wait for the audio to load, it may take time based on your current connection.<br></br>The audio is completely in Urdu language, be patient and learn Al-Quran.</div>\n            <Sound\n              url={this.state.url}\n              playStatus={this.state.playStatus}\n              playFromPosition={0}\n            />\n            <div>{this.state.playing}</div>\n            <div>\n              {this.handleRender()}\n            </div>\n            <div className=\"footer\">Developer: Akhzar Farhan</div>\n            <SidemMenu handleClick={this.fetchData} handlePlay={this.handlePlay} handlePause={this.handlePause}/>\n            {/*<SidemMenu handleClick={this.fetchDataHindi}/>*/}\n      </div>\n    );\n  }\n  handlePause = ()=>{\n    this.setState({playStatus:Sound.status.PAUSE})\n\n  }\n  handlePlaying=()=>{\n    // return \"playing\"\n    this.setState({playing:\"Audio PLaying\"})\n  }\n  handlePlay = ()=>{\n    this.setState({playStatus:Sound.status.PLAYING})\n  }\n  handleOnClick(){\n     // document.getElementById(\"mySidenav\").style.height = \"150px\";\n     // goDown();\n  }\n  componentDidMount(){\n      this.fetchData()\n  }\n  // hindiOnClick(){\n  //   document.getElementById(\"mySidenavHindi\").style.width = \"250px\";\n  // }\n  fetchData = (i)=>{\n        // this.setState({status:0, firstLoad:0})\n        fetch('https://the-quran-audio-urdu.firebaseio.com/links.json')\n        .then(response => response.json())\n         .then(arrayOfUsers => {\n              // console.log(arrayOfUsers);\n              let foo = []\n              for(let key in arrayOfUsers){\n                foo.push(arrayOfUsers[key])\n              }\n              // this.handleRender(arrayOfUsers)\n              this.setState({allAudio:foo})\n         })\n        .catch(function(err){\n          console.log(err)\n        })     \n  }\n  handleRender = (foo)=>{\n      let bar = []\n      // console.log(foo)\n      return this.state.allAudio.map((i,e)=>{\n           return (\n              <div className=\"card\" onClick={()=>this.handleSelectAudio(i.url)}>{i.name}</div>\n          )\n          console.log(i)        \n\n      })\n\n  }\n  handleSelectAudio =(url)=>{\n      this.setState({url:url})\n      this.handleOnClick()\n  }\n\n  // function goDown() {\n  //   document.getElementById(\"mySidenav\").style.height = \"0px\";\n  // }\n  // fetchDataHindi = (i)=>{\n  //   document.getElementById(\"mySidenavHindi\").style.width = \"0px\";\n  //   this.setState({status:0, firstLoad:0})\n  //   fetch('URL')\n  //   .then(response => response.json())\n  //   .then(arrayOfUsers => {\n  //     this.handleRenderHindi(arrayOfUsers)\n  //   })\n  //   .catch(function(err){\n  //     console.log(err)\n  //   })\n  // }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport '../css/verseCard.css';\n\nclass verseCard extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n   };\n  }\n  render() {\n    return (\n      <div  className=\"verseCard\">\n        <div className=\"verseNumber\">{this.props.number}</div>\n        <div className=\"verseArabic\">{this.props.content_arabic}</div>\n        {this.props.content}\n        <div className=\"verseHindi\">{this.props.content_hindi}</div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default verseCard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}